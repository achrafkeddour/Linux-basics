#1 stdout (Standard Out)

$ echo Hello World > file.txt           #write a content inside file.txt (overwrite the old content)
$ echo Hello again >> file.txt          #append a second content without overwrite the old one

#2 stdin 
$ cat < file.txt > index.html 
#same result as 'cp file.txt index.html'

#Just like we had > for stdout redirection, we can use < for stdin redirection. 

#3 stderr
#While stdout is for regular output, stderr is specifically for errors , This way, error messages don't get mixed up with normal output,
#making it easier to identify and troubleshoot issues.

$ ls /home/nonexistent > output.txt     #i dont find anything inside output.txt because there is no result
$ ls /home/nonexistent 2> error.txt     #i find the message error inside 'error.txt'   (because i sent it with 2> )

#If you want to redirect both stdout and stderr to the same file: 'ls /home/nonexistent > all_output.txt 2>&1' 
#(while there is no stdout msg i will find only stderr msg)

ls /fake/directory &> peanuts.txt
# &>: This is a shorthand in bash that redirects both stdout and stderr to the same file. (kima li 9belha)


# /dev/null : a special file in Linux like a "black hole." Anything sent to /dev/null is discarded and disappears.
command &> /dev/null #if there are any errors or normal outputs they wont appear (sent to al majhoul )


#4  command1 | command2 the output of c1 is sent as an input to c2
ls /etc/nginx  .. can be replaced by : ls /etc/nginx | less  (i browse the content using less ) or even using nano !  
The pipe operator | , allows us to get the stdout of a command and make that the stdin to another process.  

$ ls | tee mylist.txt 
I see the output of ls on the screen and if i open up the mylist.txt file i find the same information!


#5   environment variables
$ env 
#This outputs a lot of information about the environment variables you currently have set. 
#These variables contain useful information that the shell and other processes can use.

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/bin
PWD=/home/user
USER=pete          i can test them by typing : echo $USER or echo $HOME or echo $PATH

#Manual Installation involves : downloading, extracting, configuring, compiling, and installing the program from source code.
#'apt' and 'brew' provide automated and convenient ways to install software, handling dependencies and updates for you.

# When you download and install a program manually (not using apt or brew), you might place it in a directory that isn't automatically recognized by your system. 
#(kima sratli f vscode)
# These directories are considered "non-standard" because they aren't included in the PATH variable by default.

The PATH variable is a list of directories that your system checks when you type a command in the terminal. 
#If you type $ coolcommand, the system searches through each directory listed in the PATH to find the coolcommand program. 
#If it doesnâ€™t find it in these directories, it says "command not found," even the program is on your computer

To solve this problem, you can add the directory where coolcommand is located to the PATH variable. 
This way, when you run $ coolcommand, the system will also check this new directory and find the program.


how to modify the $PATH ??
#first :
sudo nano ~/.bashrc
#second Add the following line to the end of the file:
export PATH="$PATH:/path/to/your/directory"
#third save (ctrl+o) and exit (crtl+x) and execute :
source ~/.bashrc

#verify : type 'echo $PATH' you got :
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/path/to/your/directory
