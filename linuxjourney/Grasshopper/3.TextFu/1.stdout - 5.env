#1 stdout (Standard Out)

$ echo Hello World > file.txt           #write a content inside file.txt (overwrite the old content)
$ echo Hello again >> file.txt          #append a second content without overwrite the old one

#2 stdin 
$ cat < file.txt > index.html 
#same result as 'cp file.txt index.html'

#Just like we had > for stdout redirection, we can use < for stdin redirection. 

#3 stderr
#While stdout is for regular output, stderr is specifically for errors , This way, error messages don't get mixed up with normal output,
#making it easier to identify and troubleshoot issues.

$ ls /home/nonexistent > output.txt     #i dont find anything inside output.txt because there is no result
$ ls /home/nonexistent 2> error.txt     #i find the message error inside 'error.txt'   (because i sent it with 2> )

#If you want to redirect both stdout and stderr to the same file: 'ls /home/nonexistent > all_output.txt 2>&1' 
#(while there is no stdout msg i will find only stderr msg)

ls /fake/directory &> peanuts.txt
# &>: This is a shorthand in bash that redirects both stdout and stderr to the same file. (kima li 9belha)


# /dev/null : a special file in Linux like a "black hole." Anything sent to /dev/null is discarded and disappears.
command &> /dev/null #if there are any errors or normal outputs they wont appear (sent to al majhoul )


#4  command1 | command2 the output of c1 is sent as an input to c2
ls /etc/nginx  .. can be replaced by : ls /etc/nginx | less  (i browse the content using less ) or even using nano !  
The pipe operator | , allows us to get the stdout of a command and make that the stdin to another process.  

$ ls | tee mylist.txt 
I see the output of ls on the screen and if i open up the mylist.txt file i find the same information!













