# 6. Signals

A signal is a notification to a process that something has happened.

## Why We Have Signals

Signals are software interrupts and have many uses:

- A user can type special terminal characters like `Ctrl-C` or `Ctrl-Z` to kill, interrupt, or suspend processes.
- Hardware issues can occur, and the kernel wants to notify the process.
- Software issues can occur, and the kernel wants to notify the process.
- Signals are essentially ways for processes to communicate.

## Signal Process

When a signal is generated by an event, it is delivered to a process. Initially, the signal is in a **pending state** until it's delivered. When the process runs, the signal will be delivered. However, processes have signal masks that can block signal delivery if specified. When a signal is delivered, a process can:

- Ignore the signal.
- "Catch" the signal and perform a specific handler routine.
- Be terminated, as opposed to performing the normal exit system call.
- Block the signal, depending on the signal mask.

## Common Signals

Each signal is defined by integers with symbolic names in the form of `SIGxxx`. Some of the most common signals include:

- `SIGHUP` or `HUP` or `1`: Hangup
- `SIGINT` or `INT` or `2`: Interrupt
- `SIGKILL` or `KILL` or `9`: Kill
- `SIGSEGV` or `SEGV` or `11`: Segmentation fault
- `SIGTERM` or `TERM` or `15`: Software termination
- `SIGSTOP` or `STOP`: Stop

> **Note:** Numbers can vary with signals, so they are typically referred to by their names.

Some signals are unblockable. One example is the `SIGKILL` signal, which forcibly destroys the process.
